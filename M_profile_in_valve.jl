# 单管段
# 总长160km，空间步长10km，共计17个nodes，
# 阀室每隔20km设置一站，共计7个阀室（不考虑管段首尾）

# 使用matlab程序中的数据：总传热系数1.9，输气效率100%（此时未修改）

using JuMP
using Ipopt


valve_cham=20000; # 阀室间距20km 
step_space=10000; # 空间步长5km 
D=1.016; 
d=0.981; 
ke=0.017/10^3; 
coef_heat=1.9; 
step_time=30;
area=0.25*pi*d^2; 
lambda=1/(-2*log10(ke/(3.7*d)))^2;
R=8.3143;
ratio=step_time/step_space;


# 各气源组分：氢气、甲烷、乙烯、乙烷、丙烯、丙烷、异丁烷、正丁烷、异戊烷、正戊烷、己烷、庚烷、辛烷、壬烷、癸烷、十一烷、氮气、二氧化碳、硫化氢。
components_su1=[0.2 0.775 0 0.02 0 0 0 0 0 0 0 0 0 0 0 0 0.005 0 0]; #掺氢20%

# 空间节点个数
sn1=17; 
sn_total=sn1; 

# 阀室个数
valve1=7; 
num_valve=valve1;

posi=1:num_valve;


# 初始时刻的前一段时间，各节点处5个参数数据，t=0（预仿真？）
initial_p=zeros(sn_total,1);
initial_T=zeros(sn_total,1);
initial_M=zeros(sn_total,1);
initial_density=zeros(sn_total,1);
initial_H=zeros(sn_total,1);

# 从matlab程序中获取得到，
initial_p[:,1]=[
    9800000
    9620124.46240060
    9438029.53824892
    9253538.09430363
    9066456.97350552
    8876574.69857887
    8683658.74299213
    8487452.26520499
    8287670.17112590
    8083994.32752301
    7876067.69096986
    7663487.03552831
    7445793.84666846
    7222462.78148720
    6992886.84819197
    6756358.08512401
    6512041.94353894
];

initial_T[:,1]=[
    313.150000000000
    311.589153070880
    310.054739435065
    308.544932602446
    307.057870266141
    305.591643182571
    304.144281984253
    302.713741413478
    301.297881305511
    299.894443431579
    298.501023008773
    297.115033256780
    295.733660769633
    294.353808578498
    292.972022454633
    291.584393983587
    290.186430795553
];

initial_M[:,1]=[
    400
    400
    400
    400
    400
    400
    400
    400
    400
    400
    400
    400
    400
    400
    400
    400
    400
];

initial_density[:,1]=[
    70.2120031143983
    69.3848987773912
    68.5136649392281
    67.5968900734472
    66.6330441900226
    65.6204612789167
    64.5573185149341
    63.4416114345825
    62.2711240589008
    61.0433926139698
    59.7556610563314
    58.4048259884134
    56.9873676642686
    55.4992625052012
    53.9358706543817
    52.2917892475783
    50.5606576680913
];

initial_H[:,1]=[
    716276.166177062
    713346.725874597
    710549.679852110
    707882.836918876
    705344.162605017
    702931.782467017
    700643.986372180
    698479.233941477
    696436.161373557
    694513.589928843
    692710.536426193
    691026.226201611
    689460.109107755
    688011.879306704
    686681.499844251
    685469.233316597
    684375.680384964
];



# 阀室处获得的现场数据：只需要一个当前时刻的现场数据
scada_valve_p=zeros(num_valve,1);
scada_valve_T=zeros(num_valve,1);
# 阀室处只能获得p、T
# 用程序的数据
scada_valve_p[:,1]=[
    9438510.08
    9066922.463
    8684101.707
    8288089.513
    7876462.333
    7446162.642
    6993228.603
];
scada_valve_T[:,1]=[
    310.0562075
    307.0568276
    304.1412701
    301.293445
    298.4956687
    295.7278776
    292.9663112
];


valve_M=zeros(num_valve,1);
valve_M=[
    399.7257811
    399.7315965
    399.7290984
    399.7261426
    399.7227662
    399.7189054
    399.7144219
];

valve_density=zeros(num_valve,1);
valve_density=[
    68.51361695
    66.6330484
    64.55732399
    62.27113032
    59.75566821
    56.98737586
    53.93588049
];

valve_H=zeros(num_valve,1);
valve_H=[
    710555.1885
    705343.3294
    700638.2546
    696426.908
    692699.0267
    689447.5499
    686669.107
];



# 管段起终点参数
startpoint=[980000 313.15 399.1124452 70.20809537 716282.5265];
endpoint=[6512850.743 290.1876214 399.1588804 50.56497989 684374.129]; # 空格横向拼接，逗号纵向拼接：行向量和列向量在定义时候的区别


# 估计M的值：共有7个M需要估计
M_guess=zeros(num_valve,1);


s=0;
function f(s,M_guess)
        for posi in 1:1
            s=s+(valve_density[posi,1]-initial_density[2*posi+1,1]+startpoint[1,4]-initial_density[1,1]) + 
            ratio/area*( M_guess[posi,1]+initial_M[2*posi+1,1]-initial_M[1,1]-startpoint[1,3] );
        end

        for posi in 2:num_valve-1
            s=s+(valve_density[posi,1]-initial_density[2*posi+1,1]+valve_density[posi-1,1]-initial_density[2*(posi-1)+1,1]) + 
            ratio/area*( M_guess[posi,1]+initial_M[2*posi+1,1]-M_guess[posi-1,1]-initial_M[2*(posi-1)+1,1] );
        end

        for posi in num_valve:num_valve
            s=s+(endpoint[1,4]-initial_density[2*posi+1,1]+valve_density[posi,1]-initial_density[posi,1]) + 
            ratio/area*( endpoint[1,3]+initial_M[2*posi+1,1]-M_guess[posi,1]-initial_M[posi,1] );
        end

        return s
end

goal = Model(Ipopt.Optimizer)
@variable(goal, M_guess[posi in 1:num_valve]>=0)
@objective(goal, Min, f(s,M_guess))
optimize!(goal)
