#初始条件变化，nn需要变化，步长也要变化，先和matlab的程序对比差值，确保差值为0，然后简化程序，以及初始条件
#当我改变初始条件所给浓度时，需要注意初始条件中的压力温度等都是会被影响的
#还要注意关于修改浓度条件时，各浓度之间的合为1，不要0。01改成0.1
#想办法改变收敛条件（要不要改，精度是一个问题）
#考虑两股气体混合，混合后温度变化怎么考虑?
#改成管网形式
using NLsolve
P1 = [9.8 * 10^6; 9.73368 * 10^6; 9.6670 * 10^6; 9.6000 * 10^6; 9.5327 * 10^6; 9.465 * 10^6]#步长10km       # 6个时间步长
T1 = [333; 332.52; 332.047; 331.57; 331.1; 330.6194]
M1 = [520.0; 520.0; 520.0; 520.0; 520.0; 520.0]
md1 = [63.8154; 63.4973; 63.17508; 62.8487; 62.5181; 62.1832]#kg/m^3
h1 = [758310; 757474; 756645; 755822; 755007; 754199]
c11 = [0.0; 0.0; 0.0; 0.0; 0.0; 0.0]
c21 = [0.9503798; 0.9503798; 0.9503798; 0.9503798; 0.9503798; 0.9503798]#0.975 0 0.002 0 0.002 0 0 0 0 0 0 0 0 0 0 0.016 0.005 0]质量分数
c31 = [0.003654; 0.003654; 0.003654; 0.003654; 0.003654; 0.003654]
c41 = [0.0053585; 0.0053585; 0.0053585; 0.0053585; 0.0053585; 0.0053585]
c51 = [0.027237; 0.027237; 0.027237; 0.027237; 0.027237; 0.027237]
c61 = [0.0133707; 0.0133707; 0.0133707; 0.0133707; 0.0133707; 0.0133707]
T0 = 278.15#土壤温度
dt = 30#s
dx=bc= 2000#m
γ11 = dt / dx
waijing = 1.016#外径（1.016）
D=waijing;
neijing = 0.9812
d=neijing;
Ke = 0.017#粗糙度mm
λ = 1 / (-2 * log10(Ke / (3.7 * d * 1000)))^2
CRXS = 1.15#传热
A_1 = π * neijing^2/4#管道截面积
area=A_1
#zf = [0.007 0.917 0 0.05 0 0.01 0 0 0 0 0 0 0 0 0 0 0.015 0.001 0]
#Any[0.0, 0.9503797034557935, 0.0, 0.003654000162842896, 0.0, 0.005358503498084165, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0272370542935231, 0.013370738589756206, 0.0]
nn1 = 11; nn2=6; nn=nn1+nn2; 
md = zeros(nn, 3000)#%kg/m3
P = zeros(nn, 3000)#%Pa
T = zeros(nn, 3000)#%K
M = zeros(nn, 3000)#%Kg/s
h = zeros(nn, 3000)#%J/kg
c1 = zeros(nn, 3000)
c2 = zeros(nn, 3000)
c3 = zeros(nn, 3000)
c4 = zeros(nn, 3000)
c5 = zeros(nn, 3000)
c6 = zeros(nn, 3000)

P[:, 1] = P1
T[:, 1] = T1
M[:, 1] = M1
md[:, 1] = md1
h[:, 1] = h1
c1[:, 1] = c11
c2[:, 1] = c21
c3[:, 1] = c31
c4[:, 1] = c41
c5[:, 1] = c51
c6[:, 1] = c61

R = 8.3143

include("bwrsM.jl")
# include("psybwrs.jl")
# (B0H, A0H, C0H, D0H, E0H, bh, ah, αh, dh, ch, γh, HA, HB, HC, HD, HE, HF, μ0) = bwrsM( [0.0 0.9503797034557935 0.0 0.003654000162842896 0.0 0.005358503498084165 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0272370542935231 0.013370738589756206 0.0])
# (B0H, A0H, C0H, D0H, E0H, bh, ah, αh, dh, ch, γh, HA, HB, HC, HD, HE, HF, μ0) = psybwrs( [0.0 0.975 0 0.002 0 0.002 0 0 0 0 0 0 0 0 0 0 0.016 0.005 0])
BM1=[0.949379703	0.949379703	0.949379703	0.949379703	0.949379703	0.949379703	0.949379703	0.949379703	0.949379703	0.949379703]
BM2=[0.001	0.001	0.001	0.001	0.001	0.001	0.001	0.001	0.001	0.001]
for ts in 1:50
    first = [P[:, ts] T[:, ts] M[:, ts] md[:, ts] h[:, ts] c1[:, ts] c2[:, ts] c3[:, ts] c4[:, ts] c5[:, ts] c6[:, ts]]
    function f!(F, A)

        k = 0#方程和节点数混淆
        μ = [2.01588 16.042 28.05 30.068 42.08 44.094 58.12 58.12 72.146 72.0146 86.172 100.198 114.224 178.25 142.276 156.3 28.016 44.01 34.076]#各组分相对分子质量
        #-----------------------------------------总连续性方程（2个管段）（1个方程）没问题--------------------------------
        for j in 1:(nn-1)
            k=k+1
            F[k]=(A[j+1,4]-md[j+1,ts]+A[j,4]-md[j,ts])+dt/dx*(A[j+1,3]-A[j,3]+M[j+1,ts]-M[j,ts])/area
            k=k+1
            F[k] = A[j, 3] / A_1 + A[j+1, 3] / A_1 - M[j, ts] / A_1 - M[j+1, ts] / A_1 + (P[j+1, ts] - P[j, ts] + A[j+1, 1] - A[j, 1] + (M[j+1, ts] / A_1)^2 / md[j+1, ts] - (M[j, ts] / A_1)^2 / md[j, ts] + (A[j+1, 3] / A_1)^2 / A[j+1, 4] - (A[j, 3] / A_1)^2 / A[j, 4]) * γ11 + ((M[j+1, ts] / A_1)^2 / md[j+1, ts] + (A[j+1, 3] / A_1)^2 / A[j+1, 4] + (M[j, ts] / A_1)^2 / md[j, ts] + (A[j, 3] / A_1)^2 / A[j, 4]) * 0.25 * dt * λ / d
            k=k+1
            F[k] = A[j, 4] * A[j, 5] + A[j+1, 4] * A[j+1, 5] - md[j, ts] * h[j, ts] - md[j+1, ts] * h[j+1, ts] + P[j, ts] + P[j+1, ts] - A[j, 1] - A[j+1, 1] + (A[j, 3] / A_1)^2 / 2 / A[j, 4] + (A[j+1, 3] / A_1)^2 / 2 / A[j+1, 4] - (M[j, ts] / A_1)^2 / 2 / md[j, ts] - (M[j+1, ts] / A_1)^2 / 2 / md[j+1, ts] + (A[j+1, 5] * A[j+1, 3] / A_1 + M[j+1, ts] * h[j+1, ts] / A_1 - M[j, ts] * h[j, ts] / A_1 - A[j, 5] * A[j, 3] / A_1 + (A[j+1, 3] / A_1)^3 / 2 / A[j+1, 4]^2 + (M[j+1, ts] / A_1)^3 / 2 / md[j+1, ts]^2 - (A[j, 3] / A_1)^3 / 2 / A[j, 4]^2 - (M[j, ts] / A_1)^3 / 2 / md[j, ts]^2) * γ11 + 2 * CRXS * dt * (A[j, 2] + A[j+1, 2] + T[j, ts] + T[j+1, ts] - 4 * T0) / D
        end
        for j in 1:nn
            (B0H, A0H, C0H, D0H, E0H, bh, ah, αh, dh, ch, γh, HA, HB, HC, HD, HE, HF, μ0) = bwrsM( [A[j, 6] A[j, 7] 0 A[j, 8] 0 A[j, 9] 0  0 0 0 0 0 0 0 0 0 A[j, 10] A[j, 11] 0])
            k=k+1
            F[k] = (A[j, 4] / μ0 * R * A[j, 2] + (B0H * R * A[j, 2] - A0H - C0H / A[j, 2]^2 + D0H / A[j, 2]^3 - E0H / A[j, 2]^4) * (A[j, 4] / μ0)^2) + (bh * R * A[j, 2] - ah - dh / A[j, 2]) * (A[j, 4] / μ0)^3+ αh * (ah + dh / A[j, 2]) * (A[j, 4] / μ0)^6 + ch * (A[j, 4] / μ0)^3 / A[j, 2]^2 * (1 + γh * (A[j, 4] / μ0)^2) * exp(-γh * (A[j, 4] / μ0)^2) - A[j, 1] / 1000
            k=k+1
            F[k] = 1000 * (HA + HB * A[j, 2] + HC * A[j, 2]^2 + HD * A[j, 2]^3 + HE * A[j, 2]^4 + HF * A[j, 2]^5 + ((B0H * R * A[j, 2] - 2 * A0H - 4 * C0H / A[j, 2]^2 + 5 * D0H / A[j, 2]^3 - 6 * E0H / A[j, 2]^4) * A[j, 4] / μ0+ 0.5 * (2 * bh * R * A[j, 2] - 3 * ah - 4 * dh / A[j, 2]) * (A[j, 4] / μ0)^2 + 0.2 * αh * (6 * ah + 7 * dh / A[j, 2]) * (A[j, 4] / μ0)^5 + ch / (γh * A[j, 2]^2) * (3 - (3 + (γh * (A[j, 4] / μ0)^2) / 2- γh^2 * (A[j, 4] / μ0)^4) * exp(-γh * (A[j, 4] / μ0)^2))) / μ0) - A[j,5]
        end
        for j in 1:nn-1#氢气（相对分子质量是在改变的）c1代表氢气的初始时刻在各节点的质量分数
            k = k + 1
            F[k]=A[j+1,6]*A[j+1,4]-md[j+1,ts]*c1[j+1,ts]+A[j,6]*A[j,4]-md[j,ts]*c1[j,ts]+γ11*(A[j+1,3]*A[j+1,6]-A[j,6]*A[j,3]+M[j+1,ts]*c1[j+1,ts]-M[j,ts]*c1[j,ts])/A_1
            k = k + 1
            F[k]=A[j+1,7]*A[j+1,4]-md[j+1,ts]*c2[j+1,ts]+A[j,7]*A[j,4]-md[j,ts]*c2[j,ts]+γ11*(A[j+1,3]*A[j+1,7]-A[j,7]*A[j,3]+M[j+1,ts]*c2[j+1,ts]-M[j,ts]*c2[j,ts])/A_1
            k = k + 1
            F[k]=A[j+1,8]*A[j+1,4]-md[j+1,ts]*c3[j+1,ts]+A[j,8]*A[j,4]-md[j,ts]*c3[j,ts]+γ11*(A[j+1,3]*A[j+1,8]-A[j,8]*A[j,3]+M[j+1,ts]*c3[j+1,ts]-M[j,ts]*c3[j,ts])/A_1
            k = k + 1
            F[k]=A[j+1,9]*A[j+1,4]-md[j+1,ts]*c4[j+1,ts]+A[j,9]*A[j,4]-md[j,ts]*c4[j,ts]+γ11*(A[j+1,3]*A[j+1,9]-A[j,9]*A[j,3]+M[j+1,ts]*c4[j+1,ts]-M[j,ts]*c4[j,ts])/A_1
            k = k + 1
            F[k]=A[j+1,10]*A[j+1,4]-md[j+1,ts]*c5[j+1,ts]+A[j,10]*A[j,4]-md[j,ts]*c5[j,ts]+γ11*(A[j+1,3]*A[j+1,10]-A[j,10]*A[j,3]+M[j+1,ts]*c5[j+1,ts]-M[j,ts]*c5[j,ts])/A_1
            k = k + 1
            F[k]=A[j+1,11]*A[j+1,4]-md[j+1,ts]*c6[j+1,ts]+A[j,11]*A[j,4]-md[j,ts]*c6[j,ts]+γ11*(A[j+1,3]*A[j+1,11]-A[j,11]*A[j,3]+M[j+1,ts]*c6[j+1,ts]-M[j,ts]*c6[j,ts])/A_1
        end
        for j in 1:1
            k=k+1
            F[k]=
        #----------------------------------------------------边界条件（11个）--------------------------------------------------
        F[nn*11-8] = A[1, 7] -0.949379703#BM1[ts]#0.9503797034557935 #甲烷浓度（摩尔分数）的变化(自己假设)
        F[nn*11-7] = A[1, 8] - 0.003654000162842896 #0.00364#乙烷浓度的变化
        F[nn*11-6] = A[1, 9] -  0.005358503498084165#0.005337969348659004#丙烷浓度的变化
        F[nn*11-5] = A[1, 6] - 0.001#BM2[ts]#氢气浓度的变化
        F[nn*11-4] = A[1, 10] - 0.0272370542935231#0.02713264367816092#氮气浓度的变化
        F[nn*11-3] = A[1, 11] -  0.013370738589756206#0.013319471264367815#二氧化碳浓度的变化
        F[nn*11-2] = A[nn, 3] - 520#分输点的质量流量随时间变化（末端流量）
        F[nn*11-1] = A[1, 1] - 9.8 * 10^6#气源压力随时间变化
        F[nn*11] = A[1, 2] - 333#气源温度随时间变化
        # println(A)#0.975 0 0.002 0 0.002 0 0 0 0 0 0 0 0 0 0 0.016 0.005 0]
    end
    answer = nlsolve(f!, first)
    println(answer.zero)
    P[:, ts+1] = answer.zero[:, 1]
    T[:, ts+1] = answer.zero[:, 2]
    M[:, ts+1] = answer.zero[:, 3]
    md[:, ts+1] = answer.zero[:, 4]
    h[:, ts+1]  = answer.zero[:, 5]
    c1[:, ts+1] = answer.zero[:, 6]
    c2[:, ts+1] = answer.zero[:, 7]
    c3[:, ts+1] = answer.zero[:, 8]
    c4[:, ts+1] = answer.zero[:, 9]
    c5[:, ts+1] = answer.zero[:, 10]
    c6[:, ts+1] = answer.zero[:, 11]
end
#以二节点的参数，带入浓度扩散方程，看看是哪个参数起影响了

end